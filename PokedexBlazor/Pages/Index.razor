@page "/"
<PageTitle>Pokedex</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Pokedex! Total Count: @PokemonService.PokemonFilterList.Count</MudText>

<div class="d-flex flex-column align-center">
    <MudPagination @ref="_mudPagination" SelectedChanged="PageChanged" Color="Color.Primary" Count="BasicUtility.GetCellResult(PokemonService.PokemonFilterList.Count/12.0)" />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="2" md="3">
            <MudSelect T="int" Value="@_selectedPage" ValueChanged="PageChanged" Label="Jump Page" AnchorOrigin="Origin.BottomCenter">
                @for (var i = 1; i <= BasicUtility.GetCellResult(PokemonService.PokemonFilterList.Count / 12.0); i++)
                {
                    <MudSelectItem T="int" Value="@i" />
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="10" md="9">
            <PokedexBlazor.Components.SearchAutoComplete />
        </MudItem>
    </MudGrid>
    <MudChipSet Style="margin-top: 20px" @bind-SelectedChips="selectedFilterType" MultiSelection Filter>
        @foreach (var type in PokemonService.UniquePokemonType)
        {
            <MudChip Default="@type.Default" Class="@BasicUtility.GetChipClass(type.Text)" Style="text-transform:capitalize" Text="@type.Text" Variant="Variant.Text" OnClick="OnChipClicked"></MudChip>
        }
    </MudChipSet>
</div>

@if (_endIndex == -1)
{
    <div class="d-flex align-center justify-center" style="margin-top:85px">
        <MudText Typo="Typo.h5">No Pokémon found matching the selected types.</MudText>
    </div>
}
else if (PokemonService.PokemonFilterList.Count > _endIndex && PokemonService.PokemonFilterList[_endIndex].Id != 0)
{
    int startIndex = (_selectedPage - 1) * 12;
    int endIndex = Math.Min(_selectedPage * 12, PokemonService.PokemonFilterList.Count);
    <MudSwipeArea OnSwipeEnd="SwipeAction" Style="width: 100%; height: 10px">
        <Animation Effect="_effect" Speed="Speed.Faster" IterationCount="1" Enabled="_runAnimation" OnAnimationEnd="() => _runAnimation = false">

            <MudGrid>
                @foreach (var pokemon in PokemonService.PokemonFilterList.Skip(startIndex).Take(endIndex - startIndex))
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                        <MudImage Fluid="true" Src="@BasicUtility.PokemonImage(pokemon.Id)" Alt="@pokemon.Name" Class="cursor-pointer" @onclick="()=>ClickHandlerService.HandleClick(pokemon)" />
                        <MudText Typo="Typo.caption">@BasicUtility.ConvertToHashCode(pokemon.Id)</MudText>
                        <MudText Typo="Typo.h6">@BasicUtility.Capitalize(pokemon.Name)</MudText>
                        @foreach (var type in pokemon.Types)
                        {
                            <MudChip Class="@BasicUtility.GetChipClass(type)" Style="text-transform:capitalize">@type</MudChip>
                        }
                    </MudItem>
                }
            </MudGrid>
        </Animation>
    </MudSwipeArea>
}
else
{
    <div class="d-flex align-center justify-center" style="margin-top:85px">
        <span class="ring">
            Loading
            <span class="ringinside"></span>
        </span>
    </div>
}

@code {

    private AnimationEffect? _effect;
    private bool _runAnimation;
    private MudPagination? _mudPagination;
    private int _endIndex = 0;
    private int _selectedPage = 1;
    private string _selectedPageKey = "SelectedPage";
    private string _selectedTypeKey = "SelectedType";
    private MudChip[] selectedFilterType = [];

    private async void OnChipClicked()
    {

        if (selectedFilterType.Length == 0)
        {
            PokemonService.PokemonFilterList = PokemonService.PokemonList;
            await localStorage.RemoveItemAsync(_selectedTypeKey);
            PokemonService.IsFilterOn = false;
            PokemonService.UniquePokemonType = PokemonService.UNIQUE_TYPE
                .Select(x => new PokemonFilterType
                {
                    Text = x,
                    Default = false
                })
                .ToList();
        }
        else
        {
            var selectedTypes = selectedFilterType.Select(chip => chip.Text).ToArray();
            PokemonService.PokemonFilterList = PokemonService.PokemonList
                .Where(pokemon => selectedTypes.All(type => pokemon.Types.Contains(type)))
                .ToList();
            PokemonService.UniquePokemonType = PokemonService.UNIQUE_TYPE
            .Select(x => new PokemonFilterType
                {
                    Text = x,
                    Default = selectedTypes.Contains(x)
                })
            .ToList();
            await localStorage.SetItemAsync(_selectedTypeKey, selectedTypes);
            PokemonService.IsFilterOn = true;
        }
        PageChanged(1);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var cancellationTokenSource = new CancellationTokenSource();
        cancellationTokenSource.CancelAfter(TimeSpan.FromSeconds(2)); // Set timeout to 5 seconds
        try
        {
            // Wait for the PokemonService to be populated or until the timeout is reached
            while (PokemonService.PokemonFilterList.Count == 0)
            {
                await Task.Delay(500, cancellationTokenSource.Token);
            }

            // Load the selected page from local storage and navigate

            _selectedPage = int.TryParse(await localStorage.GetItemAsStringAsync(_selectedPageKey), out var page) ? page : 1;
            _mudPagination?.NavigateTo(_selectedPage - 1);
            GetPokemonList(_selectedPage);
        }
        catch (TaskCanceledException)
        {
            // If the loop is cancelled due to timeout, set _endIndex to -1
            _endIndex = -1;
        }
        finally
        {
            cancellationTokenSource.Dispose();
        }
    }

    private void GetPokemonList(int page)
    {

        _runAnimation = true;
        _selectedPage = page;
        _endIndex = Math.Min(page * 12, PokemonService.PokemonFilterList.Count) - 1;
        StateHasChanged();
        // update the key to force a re-render
        //renderKey = Guid.NewGuid().ToString();
    }

    private async void PageChanged(int i)
    {
        // Determine the slide effect based on page navigation direction
        _effect = i < _selectedPage ? Effect.SlideInLeft : Effect.SlideInRight;

        // Navigate to the selected page in the pagination component
        _mudPagination?.NavigateTo(i - 1);

        await localStorage.SetItemAsStringAsync(_selectedPageKey, i.ToString());
        GetPokemonList(i);
    }

    private void SwipeAction(SwipeEventArgs swipeEventArgs)
    {
        if (swipeEventArgs.SwipeDirection.ToDescriptionString().Equals("RightToLeft", StringComparison.OrdinalIgnoreCase) && _selectedPage < BasicUtility.GetCellResult(PokemonService.PokemonFilterList.Count / 12.0)) { PageChanged(_selectedPage + 1); }
        if (swipeEventArgs.SwipeDirection.ToDescriptionString().Equals("LeftToRight", StringComparison.OrdinalIgnoreCase) && _selectedPage > 1) PageChanged(_selectedPage - 1);
    }
}