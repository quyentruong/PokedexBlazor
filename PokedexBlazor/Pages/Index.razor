@page "/"
@implements IDisposable

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Pokedex!</MudText>

<div class="d-flex flex-column align-center">
    <MudPagination Disabled="@IsPaginationDisabled" @ref="_mudPagination" SelectedChanged="PageChanged" Color="Color.Primary" Count="84" />
    <MudSelect T="int" Value="@_selectedPage" ValueChanged="PageChanged" Label="Jump Page" AnchorOrigin="Origin.BottomCenter">
        @for (var i = 1; i <= 84; i++)
        {
            <MudSelectItem T="int" Value="@i" />
        }
    </MudSelect>
</div>


@if (!_isLoading && pokemonList != null && pokemonList.Count > _endIndex && pokemonList[_endIndex].Id != 0)
{

    int startIndex = (_selectedPage - 1) * 12;
    int endIndex = _selectedPage * 12;
    <MudGrid key="@renderKey">
        @for (var i = startIndex; i < endIndex; i++)
        {
            var pokemon = pokemonList[i];
            if (pokemon.Id != 0)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                    <MudImage Fluid="true" Src="@BasicUtility.PokemonImage(pokemon.Id)" Alt="@pokemon.N" Style="cursor:pointer" @onclick="()=>HandleClick(pokemon.N)" />
                    <MudText Typo="Typo.caption">@BasicUtility.ConvertToHashCode(pokemon.Id)</MudText>
                    <MudText Typo="Typo.h6">@pokemon.N</MudText>
                    @for (var j = 0; j < pokemon.Ts.Count; j++)
                    {
                        var type = pokemon.Ts[j];
                        <MudChip Class="@BasicUtility.GetChipClass(type)">@type</MudChip>
                    }
                </MudItem>

            }
        }
    </MudGrid>
}
else
{
    <div class="d-flex align-center justify-center" style="margin-top:85px">
        <span class="ring">
            Loading
            <span class="ringinside"></span>
        </span>
    </div>
}


@code {
    //var temp = await pokeClient.GetNdResourcePageAsync<Pokemon>(12, 0);
    //https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/1.png
    private MudPagination? _mudPagination;
    private bool IsPaginationDisabled = false;
    private int _endIndex = 0;
    private int _selectedPage = 1;
    private int _pokemonListCount = 0;
    private bool _isLoading = false;
    private string _hashValidation = "95d79ade499oa1003318d9byc5d81e16";
    private string _hashValidationKey = "HashValidation";
    private string _pokemonListCountKey = "PokemonListCount";
    private string _pokemonListKey = "PokemonList";
    private string _selectedPageKey = "SelectedPage";
    List<PokemonLite> pokemonList = new List<PokemonLite>();
    PokeApiClient pokeClient = new PokeApiClient();
    private string renderKey = Guid.NewGuid().ToString();

    protected override async Task OnInitializedAsync()
    {
        if (await localStorage.ContainKeyAsync(_hashValidationKey))
        {
            var _ = await localStorage.GetItemAsStringAsync(_hashValidationKey);
            if (!_hashValidation.Equals(_))
            {
                await localStorage.RemoveItemsAsync(new List<string>() { _pokemonListCountKey, _pokemonListKey, _selectedPageKey });
                await localStorage.SetItemAsStringAsync(_hashValidationKey, _hashValidation);
            }
        }
        else
        {
            await localStorage.RemoveItemsAsync(new List<string>() { _pokemonListCountKey, _pokemonListKey, _selectedPageKey });
            await localStorage.SetItemAsStringAsync(_hashValidationKey, _hashValidation);
        }
        if (await localStorage.ContainKeyAsync(_pokemonListCountKey))
        {
            _pokemonListCount = int.Parse(await localStorage.GetItemAsStringAsync(_pokemonListCountKey));
        }

        if (await localStorage.ContainKeyAsync(_pokemonListKey))
        {
            var _ = await localStorage.GetItemAsStringAsync(_pokemonListKey);
            var json = BasicUtility.DecompressStringDeflate(_);
            pokemonList = JsonConvert.DeserializeObject<List<PokemonLite>>(json)!;
            //pokemonList = await localStorage.GetItemAsync<List<PokemonLite>>(_pokemonListKey);
        }
        else
        {
            await GetPokemonList(1);
        }

        if (await localStorage.ContainKeyAsync(_selectedPageKey))
        {
            _selectedPage = int.Parse(await localStorage.GetItemAsStringAsync(_selectedPageKey));
            _mudPagination?.NavigateTo(_selectedPage - 1);
        }


    }

    private async Task GetPokemonList(int page)
    {
        // one page has 12 pokemons
        _isLoading = true;
        //renderKey = Guid.NewGuid().ToString();
        _selectedPage = page;
        int startIndex = (page - 1) * 12 + 1;
        int endIndex = page * 12;
        _endIndex = endIndex - 1;
        StateHasChanged();

        // Skip first load of page 1
        if (pokemonList.Count() + 12 < endIndex)
        {
            for (var i = pokemonList.Count(); i < endIndex - 12; i++)
            {
                pokemonList.Add(new PokemonLite());
            }
        }

        var willFetch = false;
        // pokemon api id start from 1
        for (var i = startIndex; i <= endIndex; i++)
        {
            // Check if click on page 3 and page 2 is empty
            if (pokemonList.Count() >= endIndex && pokemonList[i - 1] is PokemonLite && pokemonList[i - 1].Id == 0)
            {
                willFetch = true;
                var getPokemon = await pokeClient.GetResourceAsync<Pokemon>(i);
                var _ = await pokeClient.GetResourceAsync(getPokemon.Types.Select(ty => ty.Type));
                pokemonList[i - 1] = new PokemonLite(getPokemon, _);
            }
            else
            {
                try
                {
                    // trick to not call api to check if pokemon exist
                    _ = pokemonList[i - 1].Id;
                }
                catch (System.ArgumentOutOfRangeException)
                {
                    willFetch = true;
                    var getPokemon = await pokeClient.GetResourceAsync<Pokemon>(i);
                    var _ = await pokeClient.GetResourceAsync(getPokemon.Types.Select(ty => ty.Type));
                    pokemonList.Add(new PokemonLite(getPokemon, _));
                }
            }
            if (!willFetch) break;
        }
        
        if (_pokemonListCount < pokemonList.Count && willFetch)
        {
            _pokemonListCount = pokemonList.Count(x => x.Id != 0);
            await localStorage.SetItemAsStringAsync(_pokemonListCountKey, _pokemonListCount.ToString());
            var json = JsonConvert.SerializeObject(pokemonList);
            var compress = BasicUtility.CompressStringDeflate(json);
            await localStorage.SetItemAsStringAsync(_pokemonListKey, compress);
            //await localStorage.SetItemAsync<List<PokemonLite>>(_pokemonListKey, pokemonList);
        }
        _isLoading = false;
        // update the key to force a re-render
        renderKey = Guid.NewGuid().ToString();
        StateHasChanged();

    }

    private async void PageChanged(int i)
    {
#pragma warning disable CS8602, BL0005
        _mudPagination.Selected = i;
#pragma warning restore CS8602, BL0005
        await localStorage.SetItemAsStringAsync(_selectedPageKey, i.ToString());
        await GetPokemonList(i).ConfigureAwait(false);
    }


    public void HandleClick(string N)
    {
        NavigationManager.NavigateTo(NavigationManager.Uri + $"pokemon/{N}");
    }

    public void Dispose()
    {
        // dispose the client when the component is disposed
        pokeClient.Dispose();
    }
}