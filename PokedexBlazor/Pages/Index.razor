@page "/"
<PageTitle>Pokedex</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Pokedex! Total Count: @PokemonService.PokemonFilterList.Count</MudText>

<div class="d-flex flex-column align-center">
    <MudPagination @ref="_mudPagination" SelectedChanged="PageChanged" Color="Color.Primary" Count="BasicUtility.GetCellResult(PokemonService.PokemonFilterList.Count/12.0)" />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="3">
            <MudSelect T="int" Value="@_selectedPage" ValueChanged="PageChanged" Label="Jump Page" AnchorOrigin="Origin.BottomCenter">
                @for (var i = 1; i <= BasicUtility.GetCellResult(PokemonService.PokemonFilterList.Count / 12.0); i++)
                {
                    <MudSelectItem T="int" Value="@i" />
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudAutocomplete T="string" Label="Pokemon" @bind-Value="foundPokemon" SearchFunc="@SearchPokemon" MaxItems="20" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" OnAdornmentClick="()=>HandleClick(foundPokemon)" />
        </MudItem>
    </MudGrid>
    <MudChipSet Style="margin-top: 20px" @bind-SelectedChips="selectedFilterType" MultiSelection="true" Filter="true">
        @foreach (var type in PokemonService.UniquePokemonType)
        {
            <MudChip Default="@type.Default" Class="@BasicUtility.GetChipClass(type.Text)" Style="text-transform:capitalize" Text="@type.Text" Variant="Variant.Text" OnClick="OnChipClicked"></MudChip>
        }
    </MudChipSet>
</div>

@if (PokemonService.PokemonFilterList.Count > _endIndex && PokemonService.PokemonFilterList[_endIndex].Id != 0)
{
    int startIndex = (_selectedPage - 1) * 12;
    int endIndex = Math.Min(_selectedPage * 12, PokemonService.PokemonFilterList.Count);
    <MudSwipeArea OnSwipeEnd="SwipeAction" Style="width: 100%; height: 100%">
        <Animation Effect="_effect" Speed="Speed.Faster" IterationCount="1" Enabled="_runAnimation" OnAnimationEnd="() => _runAnimation = false">

            <MudGrid>
                @foreach (var pokemon in PokemonService.PokemonFilterList.Skip(startIndex).Take(endIndex - startIndex))
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                        <MudImage Fluid="true" Src="@BasicUtility.PokemonImage(pokemon.Id)" Alt="@pokemon.Name" Class="cursor-pointer" @onclick="()=>HandleClick(pokemon)" />
                        <MudText Typo="Typo.caption">@BasicUtility.ConvertToHashCode(pokemon.Id)</MudText>
                        <MudText Typo="Typo.h6">@BasicUtility.Capitalize(pokemon.Name)</MudText>
                        @foreach (var type in pokemon.Types)
                        {
                            <MudChip Class="@BasicUtility.GetChipClass(type)" Style="text-transform:capitalize">@type</MudChip>
                        }
                    </MudItem>
                }
            </MudGrid>

        </Animation>
    </MudSwipeArea>
}
else
{
    <div class="d-flex align-center justify-center" style="margin-top:85px">
        <span class="ring">
            Loading
            <span class="ringinside"></span>
        </span>
    </div>
}

@code {

    private AnimationEffect? _effect;
    private bool _runAnimation;
    private MudPagination? _mudPagination;
    private int _endIndex = 0;
    private int _selectedPage = 1;
    private string foundPokemon = String.Empty;
    private string _selectedPageKey = "SelectedPage";
    private string _selectedTypeKey = "SelectedType";
    private MudChip[] selectedFilterType = [];

    private async void OnChipClicked()
    {

        if (selectedFilterType.Length == 0)
        {
            PokemonService.PokemonFilterList = PokemonService.PokemonList;
            await localStorage.RemoveItemAsync(_selectedTypeKey);
            PokemonService.IsFilterOn = false;
        }
        else
        {
            PokemonService.PokemonFilterList = PokemonService.PokemonList.Where(x => selectedFilterType.Any(y => x.Types.Contains(y.Text.ToLower()))).ToList();
            var simpleFilterType = selectedFilterType.Select(chip => chip.Text).ToArray();
            await localStorage.SetItemAsync(_selectedTypeKey, simpleFilterType);
            PokemonService.IsFilterOn = true;
        }
        PageChanged(1);
        StateHasChanged();
    }

    private async Task<IEnumerable<string>> SearchPokemon(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        var temp = PokemonService.PokemonFilterList.Select(pokemon => $"{pokemon.Id} - {@BasicUtility.Capitalize(pokemon.Name)}");

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return temp;
        return temp.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        // Wait for the PokemonService to be populated
        while (PokemonService.PokemonFilterList.Count == 0)
        {
            await Task.Delay(500);
        }

        // Load the selected page from local storage and navigate

        _selectedPage = int.TryParse(await localStorage.GetItemAsStringAsync(_selectedPageKey), out var page) ? page : 1;
        _mudPagination?.NavigateTo(_selectedPage - 1);
        GetPokemonList(_selectedPage);
    }

    private void GetPokemonList(int page)
    {

        _runAnimation = true;
        _selectedPage = page;
        _endIndex = Math.Min(page * 12, PokemonService.PokemonFilterList.Count) - 1;
        StateHasChanged();
        // update the key to force a re-render
        //renderKey = Guid.NewGuid().ToString();
    }

    private async void PageChanged(int i)
    {
        // Determine the slide effect based on page navigation direction
        _effect = i < _selectedPage ? Effect.SlideInLeft : Effect.SlideInRight;

        // Navigate to the selected page in the pagination component
        _mudPagination?.NavigateTo(i - 1);

        await localStorage.SetItemAsStringAsync(_selectedPageKey, i.ToString());
        GetPokemonList(i);
    }

    public void HandleClick(object p)
    {
        string name;

        if (p is PokemonDiet pokemon)
        {
            PokemonService.Data = pokemon;
            name = pokemon.Name;
        }
        else if (p is string idAndName)
        {
            name = idAndName.Split(" - ")[1].Trim().ToLower();
        }
        else
        {
            throw new ArgumentException("Unhandled parameter type", nameof(p));
        }

        NavigationManager.NavigateTo($"{NavigationManager.Uri}pokemon/{name}");
    }

    private void SwipeAction(SwipeEventArgs swipeEventArgs)
    {
        if (swipeEventArgs.SwipeDirection.ToDescriptionString().Equals("RightToLeft", StringComparison.OrdinalIgnoreCase) && _selectedPage < 84) PageChanged(_selectedPage + 1);
        if (swipeEventArgs.SwipeDirection.ToDescriptionString().Equals("LeftToRight", StringComparison.OrdinalIgnoreCase) && _selectedPage > 1) PageChanged(_selectedPage - 1);
    }
}