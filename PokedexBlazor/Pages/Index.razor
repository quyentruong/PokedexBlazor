@page "/"
<PageTitle>Pokedex</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Pokedex!</MudText>

<div class="d-flex flex-column align-center">
    <MudPagination @ref="_mudPagination" SelectedChanged="PageChanged" Color="Color.Primary" Count="84" />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="3">
            <MudSelect T="int" Value="@_selectedPage" ValueChanged="PageChanged" Label="Jump Page" AnchorOrigin="Origin.BottomCenter">
                @for (var i = 1; i <= 84; i++)
                {
                    <MudSelectItem T="int" Value="@i" />
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="3">
            <MudAutocomplete T="string" Label="Pokemon" @bind-Value="foundPokemon" SearchFunc="@SearchPokemon" MaxItems="20" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" OnAdornmentClick="()=>HandleClick(foundPokemon)" />
        </MudItem>
    </MudGrid>
</div>

@if (PokemonService.PokemonList.Count > _endIndex && PokemonService.PokemonList[_endIndex].Id != 0)
{
    int startIndex = (_selectedPage - 1) * 12;
    int endIndex = Math.Min(_selectedPage * 12, 1010);
    <Animation Effect="_effect" Speed="Speed.Faster" IterationCount="1" Enabled="_runAnimation" OnAnimationEnd="() => _runAnimation = false">
        <MudSwipeArea OnSwipeEnd="SwipeAction" Style="width: 100%; height: 100%">
            <MudGrid>
                @foreach (var pokemon in PokemonService.PokemonList.Skip(startIndex).Take(endIndex - startIndex))
                {

                    <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                        <MudImage Fluid="true" Src="@BasicUtility.PokemonImage(pokemon.Id)" Alt="@pokemon.Name" Class="cursor-pointer" @onclick="()=>HandleClick(pokemon)" />
                        <MudText Typo="Typo.caption">@BasicUtility.ConvertToHashCode(pokemon.Id)</MudText>
                        <MudText Typo="Typo.h6">@BasicUtility.Capitalize(pokemon.Name)</MudText>
                        @foreach (var type in pokemon.Types)
                        {
                            <MudChip Class="@BasicUtility.GetChipClass(type)" Style="text-transform:capitalize">@type</MudChip>
                        }
                    </MudItem>
                }
            </MudGrid>
        </MudSwipeArea>
    </Animation>
}
else
{
    <div class="d-flex align-center justify-center" style="margin-top:85px">
        <span class="ring">
            Loading
            <span class="ringinside"></span>
        </span>
    </div>
}

@code {
    private AnimationEffect? _effect;
    private bool _runAnimation;
    private MudPagination? _mudPagination;
    private int _endIndex = 0;
    private int _selectedPage = 1;
    private string foundPokemon = String.Empty;
    //private string _pokemonListKey = "PokemonList";
    private string _selectedPageKey = "SelectedPage";

    private async Task<IEnumerable<string>> SearchPokemon(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        var temp = PokemonService.PokemonList.Select(pokemon => $"{pokemon.Id} - {@BasicUtility.Capitalize(pokemon.Name)}");

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return temp;
        return temp.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        while (PokemonService.PokemonList.Count == 0)
        {
            await Task.Delay(500);
        }
        if (await localStorage.ContainKeyAsync(_selectedPageKey))
        {
            _selectedPage = int.TryParse(await localStorage.GetItemAsStringAsync(_selectedPageKey), out var page) ? page : 1;
            _mudPagination?.NavigateTo(_selectedPage - 1);
            GetPokemonList(_selectedPage);
        }
        else
        {
            GetPokemonList(1);
        }
    }

    private void GetPokemonList(int page)
    {

        _runAnimation = true;
        _selectedPage = page;
        int endIndex = page * 12;
        if (endIndex > 1010) endIndex = 1010;
        _endIndex = endIndex - 1;
        StateHasChanged();

        // update the key to force a re-render
        //renderKey = Guid.NewGuid().ToString();

    }

    private async void PageChanged(int i)
    {
        if (i < _selectedPage)
        {
            _effect = Effect.SlideInLeft;
        }
        else if (i > _selectedPage)
        {
            _effect = Effect.SlideInRight;
        }
        _mudPagination?.NavigateTo(i - 1);

#pragma warning disable CS8602, BL0005
        //_mudPagination.Selected = i;
#pragma warning restore CS8602, BL0005
        await localStorage.SetItemAsStringAsync(_selectedPageKey, i.ToString());
        GetPokemonList(i);
    }

    public void HandleClick(PokemonDiet p)
    {
        PokemonService.Data = p;
        NavigationManager.NavigateTo(NavigationManager.Uri + $"pokemon/{p.Name}");
    }

    public void HandleClick(string p)
    {
        var name = p.Split(" - ")[1].Trim().ToLower();
        NavigationManager.NavigateTo(NavigationManager.Uri + $"pokemon/{name}");
    }

    private void SwipeAction(SwipeEventArgs swipeEventArgs)
    {
        if (swipeEventArgs.SwipeDirection.ToDescriptionString().Equals("RightToLeft", StringComparison.OrdinalIgnoreCase) && _selectedPage < 84) PageChanged(_selectedPage + 1);
        if (swipeEventArgs.SwipeDirection.ToDescriptionString().Equals("LeftToRight", StringComparison.OrdinalIgnoreCase) && _selectedPage > 1) PageChanged(_selectedPage - 1);
    }
}