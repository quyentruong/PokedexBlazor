@inherits LayoutComponentBase
@implements IDisposable

<MudThemeProvider @ref="@_mudThemeProvider" IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Dense="true">
        <PWAUpdater />
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudTooltip Text="@filterTooltipText">
            <MudIconButton Icon="@filterIcon" Color="Color.Inherit" />
        </MudTooltip>
        <MudTooltip Text="@modeTooltipText">
            <MudIconButton Icon="@modeIcon" Color="Color.Inherit" @onclick="ToggleDarkMode" />
        </MudTooltip>
        <MudTooltip Text="UI Framework for Blazor">
            <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Href="https://mudblazor.com/" Target="_blank" />
        </MudTooltip>
        <MudTooltip Text="GitHub Repository">
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/quyentruong/PokedexBlazor" Target="_blank" />
        </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">PokedexBlazor</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private string filterIcon => PokemonService.IsFilterOn ? Icons.Material.Outlined.FilterList : Icons.Material.Outlined.FilterListOff;
    private string filterTooltipText => PokemonService.IsFilterOn ? "Filter On" : "Filter Off";
    private string modeIcon => _isDarkMode ? Icons.Material.Outlined.DarkMode : @Icons.Material.Outlined.LightMode;
    private string modeTooltipText => _isDarkMode ? "Switch to Light Theme" : "Switch to Dark Theme";
    private bool _isDarkMode;
    private string _isDarkModeKey = "IsDarkMode";
    private string _selectedTypeKey = "SelectedType";
    bool _drawerOpen = false;
    private MudThemeProvider? _mudThemeProvider;
    private string[] _type = [];

    protected override async Task OnInitializedAsync()
    {
        List<string> uniqueType = new() { "bug", "dark", "dragon", "electric", "fairy", "fighting", "fire", "flying", "ghost", "grass", "ground", "ice", "normal", "poison", "psychic", "rock", "steel", "water" };
        // Check cache of pokemon list if existed
        // 1. decompress string
        // 2. deserialize to list pokemon
        var pokemonDeflate = await Http.GetStringAsync("data/pokemonDeflate.txt");
        var pokemonJson = BasicUtility.DecompressStringDeflate(pokemonDeflate);
        var pokemonTypeDamgeRelationDeflate = await Http.GetStringAsync("data/pokemonTypeDamgeRelationDeflate.txt");
        var typeDamageJson = BasicUtility.DecompressStringDeflate(pokemonTypeDamgeRelationDeflate);

        PokemonService.PokemonList = JsonConvert.DeserializeObject<List<PokemonDiet>>(pokemonJson)!;
        PokemonService.TypeDamageDict = JsonConvert.DeserializeObject<Dictionary<string, TypeDamageRelation>>(typeDamageJson)!;
        PokemonService.OnChange += StateHasChanged;

        _isDarkMode = localStorageSync.GetItem<bool>(_isDarkModeKey);
        PokemonService.IsDarkMode = _isDarkMode;

        // Load types filter from local storage if available
        _type = await localStorage.GetItemAsync<string[]>(_selectedTypeKey) ?? Array.Empty<string>();

        // Initialize the uniquePokemonType list based on the loaded types filter
        PokemonService.UniquePokemonType = uniqueType
            .Select(x => new PokemonFilterType
                {
                    Text = x,
                    Default = _type.Contains(x, StringComparer.OrdinalIgnoreCase)
                })
            .ToList();
        PokemonService.IsFilterOn = _type.Length > 0;
        // Filter the Pokemon list based on the types filter
        PokemonService.PokemonFilterList = _type.Length > 0
            ? PokemonService.PokemonList
                .Where(x => _type.Any(y => x.Types.Contains(y.ToLower())))
                .ToList()
            : new List<PokemonDiet>(PokemonService.PokemonList);
    }

    async void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        PokemonService.IsDarkMode = _isDarkMode;
        await localStorage.SetItemAsync<bool>(_isDarkModeKey, _isDarkMode);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public void Dispose()
    {
        PokemonService.OnChange -= StateHasChanged;
    }

}