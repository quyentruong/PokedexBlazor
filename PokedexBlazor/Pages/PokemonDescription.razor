@page "/pokemon/{Name?}"
@page "/pokemon/{Id:int?}"
@implements IDisposable
@using MudBlazor.Services
@implements IAsyncDisposable

@if (pokemon != null)
{
    <PageTitle>@BasicUtility.Capitalize(pokemon.Name) @BasicUtility.ConvertToHashCode(pokemon.Id)</PageTitle>
    <MudStack Justify="Justify.Center" Row="true">
        <MudText Typo="Typo.h3" GutterBottom="true" Color="Color.Primary">@BasicUtility.Capitalize(pokemon.Name)</MudText>
        <MudText Typo="Typo.h3" GutterBottom="true" Color="Color.Secondary">@BasicUtility.ConvertToHashCode(pokemon.Id)</MudText>
    </MudStack>
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudImage Fluid="true" Src="@BasicUtility.PokemonImage(pokemon.Id)" Alt="@pokemon.Name" />
            <MudPaper Style="border-radius: 10px;background-color:#30a7d7;">
                <MudStack Row="true" Justify="Justify.SpaceBetween">
                    <MudStack Class="ml-2" AlignItems="AlignItems.Center">
                        <MudText Style="color:aliceblue;margin-bottom:-10px">Total Stats</MudText>
                        <MudText Style="color:#212121">@_totalStat</MudText>
                    </MudStack>
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText Style="color:aliceblue;margin-bottom:-10px">Base Exp</MudText>
                        <MudText Style="color:#212121">@BasicUtility.BaseExp(pokemon.BaseExperience)</MudText>
                    </MudStack>
                    <MudStack AlignItems="AlignItems.Center">
                        <MudText Style="color:aliceblue;margin-bottom:-10px">Height</MudText>
                        <MudText Style="color:#212121">@BasicUtility.ConvertDmToFeetAndInches(pokemon.Height)</MudText>
                    </MudStack>
                    <MudStack Class="mr-2" AlignItems="AlignItems.Center">
                        <MudText Style="color:aliceblue;margin-bottom:-10px">Weight</MudText>
                        <MudText Style="color:#212121">@BasicUtility.ConvertHgToLbs(pokemon.Weight)</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudText Typo="Typo.h6" Color="Color.Info">Stats</MudText>
            @for (var s = 0; s < pokemon.Stats.Count; s++)
            {
                var stat = pokemon.Stats[s];
                var fi = _fullIcon[s];
                var ei = _emptyIcon[s];
                var color = PokemonService.IsDarkMode ? _lightColor[s] : _darkColor[s];
                color = $"color:{color}";
                <MudStack Class="mb-2" Row="true">
                    <MudText Style="max-width:10px;white-space: nowrap;margin-right:95px" Typo="Typo.body1">@BasicUtility.Capitalize(@stat.Name)</MudText>
                    <MudTooltip Text="@stat.Value.ToString()">
                        <MudRating Style="@color" FullIcon="@fi" EmptyIcon="@ei" ReadOnly="true" SelectedValue="@BasicUtility.GetNumStars(stat.Value)" MaxValue="10" />
                    </MudTooltip>
                </MudStack>
            }
            <MudText Typo="Typo.h6" Class="mt-2">Type</MudText>
            @for (var j = 0; j < pokemon.Types.Count; j++)
            {
                var type = pokemon.Types[j];
                pokemon.Weakness.UnionWith(PokemonService.TypeDamageDict[type].Weakness);

                pokemon.Strength.UnionWith(PokemonService.TypeDamageDict[type].Strength);

                <MudChip Class="@BasicUtility.GetChipClass(type)" Style="text-transform:capitalize">@type</MudChip>
            }
            <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="mt-2">Strong Against</MudText>

            @foreach (var strong in pokemon.Strength)
            {
                <MudChip Class="@BasicUtility.GetChipClass(strong)" Style="text-transform:capitalize">@strong</MudChip>
            }
            <MudText Typo="Typo.h6" Color="Color.Error" Class="mt-2">Vulnerable To</MudText>
            @foreach (var weakness in pokemon.Weakness)
            {
                <MudChip Class="@BasicUtility.GetChipClass(weakness)" Style="text-transform:capitalize">@weakness</MudChip>
            }

        </MudItem>
    </MudGrid>

    @if (new[] { "xs" }.Contains(_lastCheckPoint.ToDescriptionString()))
    {
        <div style="margin-bottom:50px"></div>
    }
    <MudAppBar Bottom="true" Elevation="1" Dense="true">
        <MudIconButton Disabled="isPreviousPokemon" Style='color:azure' Icon="fa-duotone fa-arrow-left" OnClick="PreviousPokemonAction" />
        <MudSpacer />
        <MudIconButton Style='color:azure' Icon="fa-solid fa-home" OnClick='GoBackAction' />
        <MudSpacer />
        <MudIconButton Disabled="isNextPokemon" Style='color:azure' Icon="fa-duotone fa-arrow-right" OnClick="NextPokemonAction" />
    </MudAppBar>
}
else
{
    <div class="d-flex align-center justify-center" style="margin-top:85px">
        <span class="ring">
            Loading
            <span class="ringinside"></span>
        </span>
    </div>
}
@code {
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public int Id { get; set; }
    private double _totalStat = 0;
    private List<string> _darkColor = new() { Colors.Red.Darken4, Colors.Brown.Darken4, Colors.BlueGrey.Darken4,
                                                Colors.DeepOrange.Darken4, Colors.Green.Darken4, Colors.Indigo.Darken4, Colors.Blue.Darken4 };
    private List<string> _lightColor = new() { Colors.Red.Lighten4, Colors.Brown.Lighten4, Colors.BlueGrey.Lighten4,
                                                Colors.DeepOrange.Lighten4, Colors.Green.Lighten4, Colors.Indigo.Lighten4, Colors.Blue.Lighten4 };
    private List<string> _fullIcon = new() { "fa-solid fa-heart", "fa-solid fa-sword", "fa-solid fa-shield", "fa-solid fa-staff", "fa-solid fa-shield-cat", "fa-solid fa-rabbit-running", "fa-solid fa-thumbs-up" };
    private List<string> _emptyIcon = new() { "fa-thin fa-heart", "fa-thin fa-sword", "fa-thin fa-shield", "fa-thin fa-staff", "fa-thin fa-shield-cat", "fa-thin fa-rabbit-running", "fa-thin fa-thumbs-up" };
    private PokemonDiet? pokemon;
    private bool isPreviousPokemon;
    private bool isNextPokemon;
    private PokemonDiet nextPokemon = null!;
    private PokemonDiet previousPokemon = null!;

    private string _selectedPageKey = "SelectedPage";
    private HotKeysContext? HotKeysContext;

    #region breakpoint variable
    [Inject] IBreakpointService? BreakpointListener { get; set; }
    private Breakpoint _lastCheckPoint;
    private Guid _subscriptionId;
    private Breakpoint _start;
    #endregion

    protected override async Task OnParametersSetAsync()
    {
        isPreviousPokemon = false;
        isNextPokemon = false;
        PokemonService.OnChange += StateHasChanged;
        while (PokemonService.PokemonList.Count == 0)
        {
            await Task.Delay(500);
        }
        pokemon = PokemonService.Data;
        if (pokemon == null || !pokemon.Name.Equals(Name) || pokemon.Id != Id)
        {
            pokemon = PokemonService.PokemonList.FirstOrDefault(p => p.Name.Equals(Name) || p.Id == Id);
            if (pokemon == null)
            {
                NavigationManager.NavigateTo("");
            }
        }
        await localStorage.SetItemAsStringAsync(_selectedPageKey, Math.Ceiling((decimal)pokemon?.Id! / 12).ToString());
        var _ = PokemonService.PokemonList.FirstOrDefault(p => p.Id == pokemon?.Id + 1);
        if (_ != null)
        {
            nextPokemon = _;
        }
        else
        {
            isNextPokemon = true;
        }
        _ = PokemonService.PokemonList.FirstOrDefault(p => p.Id == pokemon?.Id - 1);
        if (_ != null)
        {
            previousPokemon = _;
        }
        else
        {
            isPreviousPokemon = true;
        }
        _totalStat = pokemon!.Stats.Sum(x => x.Value);

        if (pokemon.Stats.Count == 7)
        {
            pokemon.Stats[^1] = (new PokemonDietStat()
                {
                    Name = "Avg. Stats",
                    Value = Math.Round(pokemon.Stats.Average(x => x.Value))
                });
        }
        else
        {
            pokemon.Stats.Add(new PokemonDietStat()
                {
                    Name = "Avg. Stats",
                    Value = Math.Round(pokemon.Stats.Average(x => x.Value))
                });
        }

        HotKeysContext = HotKeys.CreateContext().Add(ModCode.Ctrl, Code.ArrowRight, NextPokemonAction, "Move to next pokemon");
        HotKeysContext = HotKeys.CreateContext().Add(ModCode.Ctrl, Code.ArrowLeft, PreviousPokemonAction, "Move to previous pokemon");
        HotKeysContext = HotKeys.CreateContext().Add(ModCode.Ctrl | ModCode.Shift, Code.ArrowUp, GoBackAction, "Go back to list");
    }

    private void HandleClick(PokemonDiet p)
    {
        PokemonService.Data = p;
        NavigationManager.NavigateTo($"pokemon/{p.Name}");
    }

    private void GoBackAction()
    {
        NavigationManager.NavigateTo("");
    }

    private void PreviousPokemonAction()
    {
        HandleClick(previousPokemon);
    }

    private void NextPokemonAction()
    {
        HandleClick(nextPokemon);
    }

    public void Dispose()
    {
        PokemonService.OnChange -= StateHasChanged;
        HotKeysContext?.Dispose();
    }

    #region breakpoint code
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var subscriptionResult = await BreakpointListener!.Subscribe((breakpoint) =>
            {
                _lastCheckPoint = breakpoint;
                InvokeAsync(StateHasChanged);
            }, new ResizeOptions
                {
                    ReportRate = 250,
                    NotifyOnBreakpointOnly = true,
                });

            _start = subscriptionResult.Breakpoint;
            _subscriptionId = subscriptionResult.SubscriptionId;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BreakpointListener!.Unsubscribe(_subscriptionId);
    #endregion
}
