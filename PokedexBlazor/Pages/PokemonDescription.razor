@page "/pokemon/{Name?}"
@page "/pokemon/{Id:int?}"
@implements IDisposable

@if (pokemon != null)
{
    <PageTitle>@BasicUtility.Capitalize(pokemon.Name) @BasicUtility.ConvertToHashCode(pokemon.Id)</PageTitle>
    <MudSwipeArea OnSwipeEnd="SwipeAction" Style="width: 100%; height: 100%">
        <Animation Effect="_effect" Speed="Speed.Faster" IterationCount="1" Enabled="_runAnimation" OnAnimationEnd="() => _runAnimation = false">
            <MudStack Justify="Justify.Center" Row="true">
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary" Style="white-space: nowrap">@BasicUtility.Capitalize(pokemon.Name)</MudText>
                    <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Secondary">@BasicUtility.ConvertToHashCode(pokemon.Id)</MudText>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                    <MudText Typo="Typo.h2" GutterBottom="true" Color="Color.Primary" Style="white-space: nowrap">@BasicUtility.Capitalize(pokemon.Name)</MudText>
                    <MudText Typo="Typo.h2" GutterBottom="true" Color="Color.Secondary">@BasicUtility.ConvertToHashCode(pokemon.Id)</MudText>
                </MudHidden>
            </MudStack>

            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="9" md="4">
                    <MudImage Fluid="true" Src="@BasicUtility.PokemonImage(pokemon.Id)" Alt="@pokemon.Name" />
                    <MudPaper Style="border-radius: 10px;background-color:#30a7d7;">
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudStack Class="ml-2" AlignItems="AlignItems.Center">
                                <MudText Style="color:aliceblue;margin-bottom:-10px">Total Stats</MudText>
                                <MudText Style="color:#212121">@_totalStat</MudText>
                            </MudStack>
                            <MudStack AlignItems="AlignItems.Center">
                                <MudText Style="color:aliceblue;margin-bottom:-10px">Base Exp</MudText>
                                <MudText Style="color:#212121">@BasicUtility.BaseExp(pokemon.BaseExperience)</MudText>
                            </MudStack>
                            <MudStack AlignItems="AlignItems.Center">
                                <MudText Style="color:aliceblue;margin-bottom:-10px">Height</MudText>
                                <MudText Style="color:#212121">@BasicUtility.ConvertDmToFeetAndInches(pokemon.Height)</MudText>
                            </MudStack>
                            <MudStack Class="mr-2" AlignItems="AlignItems.Center">
                                <MudText Style="color:aliceblue;margin-bottom:-10px">Weight</MudText>
                                <MudText Style="color:#212121">@BasicUtility.ConvertHgToLbs(pokemon.Weight)</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudText Typo="Typo.h6" Color="Color.Info">Stats</MudText>
                    @for (var s = 0; s < pokemon.Stats.Count; s++)
                    {
                        var stat = pokemon.Stats[s];
                        var fi = _fullIcon[s];
                        var ei = _emptyIcon[s];
                        var color = PokemonService.IsDarkMode ? _lightColor[s] : _darkColor[s];
                        color = $"color:{color}";
                        <MudStack Class="mb-2" Row="true">
                            <MudText Style="max-width:10px;white-space: nowrap;margin-right:95px" Typo="Typo.body1">@BasicUtility.Capitalize(@stat.Name)</MudText>
                            <MudTooltip Text="@stat.Value.ToString()">
                                <MudRating Style="@color" FullIcon="@fi" EmptyIcon="@ei" ReadOnly="true" SelectedValue="@BasicUtility.GetNumStars(stat.Value)" MaxValue="10" />
                            </MudTooltip>
                        </MudStack>
                    }
                    <MudText Typo="Typo.h6" Class="mt-2">Type</MudText>
                    @for (var j = 0; j < pokemon.Types.Count; j++)
                    {
                        var type = pokemon.Types[j];
                        pokemon.Weakness.UnionWith(PokemonService.TypeDamageDict[type].Weakness);

                        pokemon.Strength.UnionWith(PokemonService.TypeDamageDict[type].Strength);

                        <MudChip Class="@BasicUtility.GetChipClass(type)" Style="text-transform:capitalize">@type</MudChip>
                    }
                    <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="mt-2">Strong Against</MudText>

                    @foreach (var strong in pokemon.Strength)
                    {
                        <MudChip Class="@BasicUtility.GetChipClass(strong)" Style="text-transform:capitalize">@strong</MudChip>
                    }
                    <MudText Typo="Typo.h6" Color="Color.Error" Class="mt-2">Vulnerable To</MudText>
                    @foreach (var weakness in pokemon.Weakness)
                    {
                        <MudChip Class="@BasicUtility.GetChipClass(weakness)" Style="text-transform:capitalize">@weakness</MudChip>
                    }

                </MudItem>
            </MudGrid>

            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                <div style="height:50px"></div>
            </MudHidden>
        </Animation>
    </MudSwipeArea>

    <MudAppBar Bottom="true" Elevation="1" Dense="true">
        <MudIconButton Disabled="isPreviousPokemon" Style='color:azure' Icon="fa-duotone fa-arrow-left" OnClick="PreviousPokemonAction" />
        <MudSpacer />
        <MudIconButton Style='color:azure' Icon="fa-solid fa-home" OnClick='GoBackAction' />
        <MudSpacer />
        <MudIconButton Disabled="isNextPokemon" Style='color:azure' Icon="fa-duotone fa-arrow-right" OnClick="NextPokemonAction" />
    </MudAppBar>
}
else
{
    <div class="d-flex align-center justify-center" style="margin-top:85px">
        <span class="ring">
            Loading
            <span class="ringinside"></span>
        </span>
    </div>
}
@code {
    private AnimationEffect? _effect;
    private bool _runAnimation;
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public int Id { get; set; }

    private double _totalStat = 0;
    private List<string> _darkColor = new() { Colors.Red.Darken4, Colors.Brown.Darken4, Colors.BlueGrey.Darken4,
                                                Colors.DeepOrange.Darken4, Colors.Green.Darken4, Colors.Indigo.Darken4, Colors.Blue.Darken4 };
    private List<string> _lightColor = new() { Colors.Red.Lighten4, Colors.Brown.Lighten4, Colors.BlueGrey.Lighten4,
                                                Colors.DeepOrange.Lighten4, Colors.Green.Lighten4, Colors.Indigo.Lighten4, Colors.Blue.Lighten4 };
    private List<string> _fullIcon = new() { "fa-solid fa-heart", "fa-solid fa-sword", "fa-solid fa-shield", "fa-solid fa-staff", "fa-solid fa-shield-cat", "fa-solid fa-rabbit-running", "fa-solid fa-thumbs-up" };
    private List<string> _emptyIcon = new() { "fa-thin fa-heart", "fa-thin fa-sword", "fa-thin fa-shield", "fa-thin fa-staff", "fa-thin fa-shield-cat", "fa-thin fa-rabbit-running", "fa-thin fa-thumbs-up" };
    private PokemonDiet? pokemon;
    private bool isPreviousPokemon;
    private bool isNextPokemon;
    private PokemonDiet? nextPokemon;
    private PokemonDiet? previousPokemon;

    private string _selectedPageKey = "SelectedPage";

    protected override async Task OnParametersSetAsync()
    {
        isPreviousPokemon = false;
        isNextPokemon = false;
        PokemonService.OnChange += StateHasChanged;

        while (PokemonService.PokemonFilterList.Count == 0)
        {
            await Task.Delay(500);
        }
        pokemon = PokemonService.Data ?? PokemonService.PokemonFilterList.FirstOrDefault(p => p.Name.Equals(Name, StringComparison.OrdinalIgnoreCase) || p.Id == Id);

        if (pokemon == null)
        {
            NavigationManager.NavigateTo("");
            return;
        }

        var currentIndex = PokemonService.PokemonFilterList.FindIndex(p => p.Id == pokemon?.Id);
        if (currentIndex != -1)
        {
            var pageNumber = BasicUtility.GetCellResult((currentIndex + 1) / 12.0);
            await localStorage.SetItemAsStringAsync(_selectedPageKey, pageNumber.ToString());
        }

        // Simplify the assignment of next and previous Pokémon
        nextPokemon = currentIndex + 1 < PokemonService.PokemonFilterList.Count ? PokemonService.PokemonFilterList[currentIndex + 1] : null;
        previousPokemon = currentIndex > 0 ? PokemonService.PokemonFilterList[currentIndex - 1] : null;

        // Update flags based on the existence of next and previous Pokémon
        isNextPokemon = nextPokemon == null;
        isPreviousPokemon = previousPokemon == null;

        _totalStat = pokemon!.Stats.Sum(x => x.Value);

        if (pokemon.Stats.Count == 7)
        {
            pokemon.Stats[^1] = (new PokemonDietStat()
                {
                    Name = "Avg. Stats",
                    Value = Math.Round(pokemon.Stats.Average(x => x.Value))
                });
        }
        else
        {
            pokemon.Stats.Add(new PokemonDietStat()
                {
                    Name = "Avg. Stats",
                    Value = Math.Round(pokemon.Stats.Average(x => x.Value))
                });
        }

    }

    private void HandleClick(PokemonDiet p)
    {
        _runAnimation = true;
        PokemonService.Data = p;
        NavigationManager.NavigateTo($"pokemon/{p.Name}");
    }

    public void SwipeAction(SwipeEventArgs swipeEventArgs)
    {
        if (swipeEventArgs.SwipeDirection.ToDescriptionString().Equals("RightToLeft", StringComparison.OrdinalIgnoreCase)) NextPokemonAction();
        if (swipeEventArgs.SwipeDirection.ToDescriptionString().Equals("LeftToRight", StringComparison.OrdinalIgnoreCase)) PreviousPokemonAction();
    }

    private void GoBackAction()
    {
        NavigationManager.NavigateTo("");
    }

    private void PreviousPokemonAction()
    {
        if (previousPokemon == null) return;
        HandleClick(previousPokemon);
    }

    private void NextPokemonAction()
    {
        if (nextPokemon == null) return;
        HandleClick(nextPokemon);
    }

    public void Dispose()
    {
        PokemonService.OnChange -= StateHasChanged;
    }

}